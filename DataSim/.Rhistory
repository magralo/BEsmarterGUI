simnegbindata = list(y=simnegbin(X,beta,alpha), X=X, beta=beta)
Data1 = simnegbindata
Bmean<-c(0,0)
Bvar<-diag(1,2,2)
a<-0.001
b<-0.001
R<-10000
burnin<-0
Mcmc1 = list(R=R,burnin=burnin,nprint=1000000,keep=keep,s_beta=beta,s_alpha=alpha)
args<-list(list(y=simnegbindata$y,X=X),list(betabar=Bmean,A=Bvar,a=a,b=b),Mcmc1)
out2<-do.call(rnegbinRw,args)
summary(out2$alphadraw)
keep<-5
Mcmc1 = list(R=R,burnin=burnin,nprint=1000000,keep=keep,s_beta=beta,s_alpha=alpha)
args<-list(list(y=simnegbindata$y,X=X),list(betabar=Bmean,A=Bvar,a=a,b=b),Mcmc1)
out2<-do.call(rnegbinRw,args)
summary(out2$alphadraw)
alpha<-1
beta<-1
Mcmc1 = list(R=R,burnin=burnin,nprint=1000000,keep=keep,s_beta=beta,s_alpha=alpha)
args<-list(list(y=simnegbindata$y,X=X),list(betabar=Bmean,A=Bvar,a=a,b=b),Mcmc1)
out2<-do.call(rnegbinRw,args)
summary(out2$alphadraw)
library(MCMCpack)
x<-rep(1:10,5)
y<-rnorm(50,mean=x)
posterior_50 <- MCMCquantreg(y~x)
posterior_95 <- MCMCquantreg(y~x, tau=0.95, verbose=10000,
mcmc=50000, thin=10, seed=2)
summary(posterior_50)
summary(posterior_95)
x
summary(posterior_95)
summary(posterior_5)
summary(posterior_50)
set.seed(66)
n=1000
m=2
X=cbind(rep(1,n),runif(n),runif(n))
k=ncol(X)
B=matrix(c(1,2,-1,3,2,1),ncol=m)
Sigma=matrix(c(1,.5,.5,1),ncol=m); RSigma=chol(Sigma)
Y=X%*%B+matrix(rnorm(m*n),ncol=m)%*%RSigma
y=X%*%B[,1]+matrix(rnorm(m*n),ncol=m)%*%RSigma
y=X%*%B[,1]+matrix(rnorm(m*n),ncol=1)%*%RSigma[1,1]
y=X%*%B[,1]+matrix(rnorm(1*n),ncol=1)%*%RSigma[1,1]
plot(Y[,1])
View(Y)
View(Y)
View(y)
View(y)
plot(Y[,1],type=l)
plot(Y[,1],type='line')
plot(Y[,1],type='l')
dat<-cbind(Y,X)
B
#Maximum Likelihood Lineal Model
remove(list = ls())
MD<-550  #Maximum Dataset
S<-1 #Simulations
B<-c(2.5,0.8,-1.2)
sigma2<-0.1
set.seed(12345)
X<-matrix(cbind(rep(1,MD),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
u<-replicate(S,rnorm(MD,0,sigma2^0.5))
y<-kronecker(t(as.vector(rep(1,S))),X%*%B)+u
log.L<-function(hat.theta,d){
N<-d[1]
i<-d[2]
hat.B<-c(hat.theta[1],hat.theta[2],hat.theta[3])
hat.sigma2<-hat.theta[4]
X1<-X[1:N,]
y1<-y[1:N,i]
logL<-(-N/2)*log(2*pi)-(N/2)*log(hat.sigma2)-(1/(2*hat.sigma2))*t(y1-X1%*%hat.B)%*%(y1-X1%*%hat.B)
return(-logL)
}
#library(rgenoud)
#dom<-cbind(c(-50,-50,-50,0), rep(50,4))
#res.genoud <- genoud(log.L, nvars=4, Domains=dom, hessian=TRUE, d=c(nrow(y),1))
B.0<-c(0,0,0)
sigma2.0<-1
theta.0<-c(B.0,sigma2.0)
res.optim<-optim(theta.0, log.L, method="BFGS", hessian=TRUE, d=c(nrow(y),1))
warnings()
#Maximum Likelihood Lineal Model
remove(list = ls())
MD<-550  #Maximum Dataset
S<-1 #Simulations
B<-c(2.5,0.8,-1.2)
sigma2<-0.1
set.seed(12345)
X<-matrix(cbind(rep(1,MD),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
u<-replicate(S,rnorm(MD,0,sigma2^0.5))
y<-kronecker(t(as.vector(rep(1,S))),X%*%B)+u
log.L<-function(hat.theta,d){
N<-d[1]
i<-d[2]
hat.B<-c(hat.theta[1],hat.theta[2],hat.theta[3])
hat.sigma2<-hat.theta[4]
X1<-X[1:N,]
y1<-y[1:N,i]
if (hat.sigma2<=0){logL<- -Inf}
else{logL<-(-N/2)*log(2*pi)-(N/2)*log(hat.sigma2)-(1/(2*hat.sigma2))*t(y1-X1%*%hat.B)%*%(y1-X1%*%hat.B)}
return(-logL)
}
#library(rgenoud)
#dom<-cbind(c(-50,-50,-50,0), rep(50,4))
#res.genoud <- genoud(log.L, nvars=4, Domains=dom, hessian=TRUE, d=c(nrow(y),1))
B.0<-c(0,0,0)
sigma2.0<-1
theta.0<-c(B.0,sigma2.0)
res.optim<-optim(theta.0, log.L, method="BFGS", hessian=TRUE, d=c(nrow(y),1))
res.optim$par
sqrt(diag(solve(res.optim$hessian)))
res.glm<-glm(y[,1]~X-1,family=gaussian)
summary(res.glm)
ni<-c(501:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
betas<-function(d){
res<-optim(theta.0, log.L, method="BFGS", hessian=TRUE,d=d)
theta<-res$par
sd.theta<-sqrt(diag(solve(res$hessian)))
return(rbind(theta,sd.theta))
}
ni<-c(501:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
ni<-c(51:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
S<-10 #Simulations
betas<-function(d){
res<-optim(theta.0, log.L, method="BFGS", hessian=TRUE,d=d)
theta<-res$par
sd.theta<-sqrt(diag(solve(res$hessian)))
return(rbind(theta,sd.theta))
}
ni<-c(51:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
betas<-function(d){
res<-optim(theta.0, log.L, method="BFGS", hessian=TRUE,d=d)
theta<-res$par
sd.theta<-sqrt(diag(solve(res$hessian)))
return(rbind(theta,sd.theta))
}
ni<-c(51:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
remove(list = ls())
MD<-550  #Maximum Dataset
S<-10 #Simulations
B<-c(2.5,0.8,-1.2)
sigma2<-0.1
set.seed(12345)
X<-matrix(cbind(rep(1,MD),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
u<-replicate(S,rnorm(MD,0,sigma2^0.5))
y<-kronecker(t(as.vector(rep(1,S))),X%*%B)+u
betas<-function(d){
res<-optim(theta.0, log.L, method="BFGS", hessian=TRUE,d=d)
theta<-res$par
sd.theta<-sqrt(diag(solve(res$hessian)))
return(rbind(theta,sd.theta))
}
ni<-c(51:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
#Maximum Likelihood Lineal Model
remove(list = ls())
MD<-550  #Maximum Dataset
S<-10 #Simulations
B<-c(2.5,0.8,-1.2)
sigma2<-0.1
set.seed(12345)
X<-matrix(cbind(rep(1,MD),rnorm(MD,0,1),rnorm(MD,0,1)),MD,length(B))
u<-replicate(S,rnorm(MD,0,sigma2^0.5))
y<-kronecker(t(as.vector(rep(1,S))),X%*%B)+u
log.L<-function(hat.theta,d){
N<-d[1]
i<-d[2]
hat.B<-c(hat.theta[1],hat.theta[2],hat.theta[3])
hat.sigma2<-hat.theta[4]
X1<-X[1:N,]
y1<-y[1:N,i]
if (hat.sigma2<=0){logL<- -Inf}
else{logL<-(-N/2)*log(2*pi)-(N/2)*log(hat.sigma2)-(1/(2*hat.sigma2))*t(y1-X1%*%hat.B)%*%(y1-X1%*%hat.B)}
return(-logL)
}
#library(rgenoud)
#dom<-cbind(c(-50,-50,-50,0), rep(50,4))
#res.genoud <- genoud(log.L, nvars=4, Domains=dom, hessian=TRUE, d=c(nrow(y),1))
B.0<-c(0,0,0)
sigma2.0<-1
theta.0<-c(B.0,sigma2.0)
res.optim<-optim(theta.0, log.L, method="BFGS", hessian=TRUE, d=c(nrow(y),1))
res.glm<-glm(y[,1]~X-1,family=gaussian)
summary(res.glm)
#res.genoud$par
#sqrt(diag(solve(res.genoud$hessian)))
res.optim$par
sqrt(diag(solve(res.optim$hessian)))
betas<-function(d){
res<-optim(theta.0, log.L, method="BFGS", hessian=TRUE,d=d)
theta<-res$par
sd.theta<-sqrt(diag(solve(res$hessian)))
return(rbind(theta,sd.theta))
}
ni<-c(51:MD)
T<-rbind(rep(ni,each=S),rep(1:S,length(ni)))
start.time1 <- Sys.time()
theta<-array(apply(T,2,betas),c(2*length(theta.0),S,length(ni)))
medias<-sapply(1:length(ni), function(x) rowMeans(theta[,,x]))
end.time1 <- Sys.time()
time.taken1 <- end.time1 - start.time1
time.taken1
medias
par(mfrow=c(2,2))
for(i in seq(1,7,2)){ts.plot(medias[i,])}
for(i in seq(2,8,2)){ts.plot(medias[i,])}
library(doParallel)
library(snow)
install.packages("snow")
# Find out how many cores are available (if you don't already know)
detectCores()
# Create cluster with desired number of cores
cl <- makeCluster(4, type="SOCK")
registerDoParallel(cl)
on.exit(stopCluster(cl))
getDoParWorkers()
start.time2 <- Sys.time()
clusterExport(cl, list("theta.0","log.L","X","y"))
thetap<-array(parApply(cl,T,2,betas),c(2*length(theta.0),S,length(ni)))
clusterExport(cl, list("thetap"))
mediasp<-parSapply(cl,1:length(ni), function(x) rowMeans(thetap[,,x]))
end.time2 <- Sys.time()
time.taken2 <- end.time2 - start.time2
time.taken2
par(mfrow=c(2,2))
for(i in seq(1,7,2)){ts.plot(mediasp[i,])}
for(i in seq(2,8,2)){ts.plot(mediasp[i,])}
stopCluster(cl)
library(sm)
install.packages("sm")
A<-cbind(c(thetap[1,,c(1,50,100,200,300,400,500)]),rep(1:7,each=S))
cyl.f <- factor(A[,2], levels= c(1:7), labels = c("N=51","N=100","N=150","N=250","N=350","N=450","N=550"))
par(mfrow=c(1,1))
sm.density.compare(A[,1],A[,2],xlab="Hat Beta")
title(main="Density: Different sample size")
colfill<-c(2:(2+length(levels(cyl.f))))
legend(2.55,25, levels(cyl.f), fill=colfill)
library(sm)
A<-cbind(c(thetap[1,,c(1,50,100,200,300,400,500)]),rep(1:7,each=S))
cyl.f <- factor(A[,2], levels= c(1:7), labels = c("N=51","N=100","N=150","N=250","N=350","N=450","N=550"))
par(mfrow=c(1,1))
sm.density.compare(A[,1],A[,2],xlab="Hat Beta")
title(main="Density: Different sample size")
colfill<-c(2:(2+length(levels(cyl.f))))
legend(2.55,25, levels(cyl.f), fill=colfill)
getwd()
setwd("C:/Users/aramir21/Desktop/GUI/DataSim")
Dat<-read.csv("511SimNormalBMAcsv",sep=",")
Dat<-read.csv("511SimNormalBMA.csv",sep=",")
View(Dat)
X<-Dat[,-1]
Y<-Dat[,1]
aux <- bicreg(x=X, y=Y, strict = FALSE, OR = 20, maxCol = (dim(X)[2]+1))
library(bma)
library(BMA)
aux <- bicreg(x=X, y=Y, strict = FALSE, OR = 20, maxCol = (dim(X)[2]+1))
round(0.1235,3)
round(0.123590459043,3)
library(ivbma)
set.seed(1)
data(growth)
attach(growth)
## To replicate KL, set s to 1e5
a <- ivbma(Y, X, Z, W, s = 1e2)
Datos<-data(growth)
View(Datos)
growth
attach(growth)
## To replicate KL, set s to 1e5
a <- ivbma(Y, X, Z, W, s = 1e2)
dim(growth$X)
dim(growth$W)
Y<-growth$Y
X<-growth$X
Z<-growth$Z
W<-growth$W
a <- ivbma(Y, X, Z, W, s = 1e2)
dim(Z)
dim(W)
dim(X)
View(X)
View(W)
View(Z)
obj <- ivbma(Y, X, Z, W, s = 1e2)
rho=t(obj$rho)
nombreR=paste('lambda',1:nrow(obj$lambda[,1,]))
lambda=NULL
Sigma=NULL
nombreL=NULL
nombreS=NULL
for(j in 1:dim(obj$lambda[2])){
lambda=rbind(lambda,obj$lambda[,j,])
nombreL=c(nombreL,paste("lambda",j,1:nrow(obj$lambda[,1,])))
for(l in j:dim(obj$lambda[2])){
Sigma=rbind(Sigma,obj$Sigma[j,l,])
nombreS=c(nombreS,paste("Sigma",j,l))
}
}
aux=rbind(rho,lambda,Sigma)
dim(obj$lambda[2])
dim(obj$lambda)
dim(obj$lambda)[2]
lambda=NULL
Sigma=NULL
nombreL=NULL
nombreS=NULL
for(j in 1:dim(obj$lambda)[2]){
lambda=rbind(lambda,obj$lambda[,j,])
nombreL=c(nombreL,paste("lambda",j,1:nrow(obj$lambda[,1,])))
for(l in j:dim(obj$lambda)[2]){
Sigma=rbind(Sigma,obj$Sigma[j,l,])
nombreS=c(nombreS,paste("Sigma",j,l))
}
}
aux=rbind(rho,lambda,Sigma)
rownames(aux)=c(nombreR,nombreL,nombreS)
View(aux)
View(aux)
21+23*2+6
c(nombreR,nombreL,nombreS)
nombreR=paste('rho',1:ncol(obj$rho))
lambda=NULL
Sigma=NULL
nombreL=NULL
nombreS=NULL
for(j in 1:dim(obj$lambda)[2]){
lambda=rbind(lambda,obj$lambda[,j,])
nombreL=c(nombreL,paste("lambda",j,1:nrow(obj$lambda[,1,])))
for(l in j:dim(obj$lambda)[2]){
Sigma=rbind(Sigma,obj$Sigma[j,l,])
nombreS=c(nombreS,paste("Sigma",j,l))
}
}
aux=rbind(rho,lambda,Sigma)
rownames(aux)=c(nombreR,nombreL,nombreS)
View(aux)
dim(obj$lambda)[2]
set.seed(1)
Datos<-data(growth)
attach(growth)
## To replicate KL, set s to 1e5
Y<-growth$Y
X<-growth$X
Z<-growth$Z
W<-growth$W
obj <- ivbma(Y, X, Z, W, s = 1e2)
rho=t(obj$rho)
nombreR=paste('rho',1:ncol(obj$rho))
lambda=NULL
Sigma=NULL
nombreL=NULL
nombreS=NULL
for(j in 1:dim(obj$lambda)[2]){
lambda=rbind(lambda,obj$lambda[,j,])
nombreL=c(nombreL,paste("lambda",j,1:nrow(obj$lambda[,1,])))
for(l in j:(dim(obj$lambda)[2]+1)){
Sigma=rbind(Sigma,obj$Sigma[j,l,])
nombreS=c(nombreS,paste("Sigma",j,l))
}
}
aux=rbind(rho,lambda,Sigma)
rownames(aux)=c(nombreR,nombreL,nombreS)
View(aux)
setwd("C:/Users/aramir21/Desktop/GUI/DataSim")
set.seed(66)
simIV = function(delta1,delta2,betas1,betas2,beta2,Sigma,n,z) {
eps = matrix(rnorm(3*n),ncol=3) %*% chol(Sigma)
xs1 = z%*%delta1 + eps[,1]
xs2 = z%*%delta2 + eps[,2]
x2 = rnorm(dim(z)[1])
y = betas1*xs1+betas2*xs2+beta2*x2 + eps[,3]
X = as.matrix(cbind(xs1,xs2,x2))
colnames(X)=c("x1en","x2en","xex")
y=matrix(y,dim(z)[1],1)
colnames(y)=c("y")
list(X=X,y=y)}
n = 1000 ; p=3 # number of instruments
z = matrix(runif(n*p),ncol=p)
rho31=.8; rho32=.5;
Sigma = matrix(c(1,0,rho31,0,1,rho32,0,rho31,rho32,1),ncol=3)
Sigma = matrix(c(1,0,rho31,0,1,rho32,rho31,rho32,1),ncol=3)
Sigma
setwd("C:/Users/aramir21/Desktop/GUI/DataSim")
set.seed(66)
simIV = function(delta1,delta2,betas1,betas2,beta2,Sigma,n,z) {
eps = matrix(rnorm(3*n),ncol=3) %*% chol(Sigma)
xs1 = z%*%delta1 + eps[,1]
xs2 = z%*%delta2 + eps[,2]
x2 = rnorm(dim(z)[1])
y = betas1*xs1+betas2*xs2+beta2*x2 + eps[,3]
X = as.matrix(cbind(xs1,xs2,x2))
colnames(X)=c("x1en","x2en","xex")
y=matrix(y,dim(z)[1],1)
colnames(y)=c("y")
list(X=X,y=y)}
n = 1000 ; p=3
z = matrix(runif(n*p),ncol=p)
rho31=.8; rho32=.5;
Sigma = matrix(c(1,0,rho31,0,1,rho32,rho31,rho32,1),ncol=3)
delta1 = c(4,-1,2); delta2=c(-2,3,-1); betas1 = .5; betas2 = -1; beta2 = 1
simiv = simIV(delta1,delta2,betas1,betas2,beta2,Sigma,n,z)
View(simiv)
View(simiv$X)
View(simiv$y)
setwd("C:/Users/aramir21/Desktop/GUI/DataSim")
set.seed(66)
simIV = function(delta1,delta2,beta0,betas1,betas2,beta2,Sigma,n,z) {
eps = matrix(rnorm(3*n),ncol=3) %*% chol(Sigma)
xs1 = z%*%delta1 + eps[,1]
xs2 = z%*%delta2 + eps[,2]
x2 = rnorm(dim(z)[1])
y = beta0+betas1*xs1+betas2*xs2+beta2*x2 + eps[,3]
X = as.matrix(cbind(xs1,xs2,1,x2))
colnames(X)=c("x1en","x2en","cte","xex")
y=matrix(y,dim(z)[1],1)
colnames(y)=c("y")
list(X=X,y=y)}
n = 1000 ; p=3
z = matrix(runif(n*p),ncol=p)
rho31=.8; rho32=.5;
Sigma = matrix(c(1,0,rho31,0,1,rho32,rho31,rho32,1),ncol=3)
delta1 = c(4,-1,2); delta2=c(-2,3,-1); betas1 = .5; betas2 = -1; beta2 = 1; beta0=2
simiv = simIV(delta1,delta2,beta0,betas1,betas2,beta2,Sigma,n,z)
nW<- 18
W<- matrix(rnorm(nW*dim(z)[1]),dim(z)[1],nW)
YXW<-cbind(simiv$y,simiv$X,W)
View(YXW)
View(z)
setwd("C:/Users/aramir21/Desktop/GUI/DataSim")
set.seed(66)
simIV = function(delta1,delta2,beta0,betas1,betas2,beta2,Sigma,n,z) {
eps = matrix(rnorm(3*n),ncol=3) %*% chol(Sigma)
xs1 = z%*%delta1 + eps[,1]
xs2 = z%*%delta2 + eps[,2]
x2 = rnorm(dim(z)[1])
y = beta0+betas1*xs1+betas2*xs2+beta2*x2 + eps[,3]
X = as.matrix(cbind(xs1,xs2,1,x2))
colnames(X)=c("x1en","x2en","cte","xex")
y=matrix(y,dim(z)[1],1)
colnames(y)=c("y")
list(X=X,y=y)}
n = 1000 ; p=3
z = matrix(runif(n*p),ncol=p)
rho31=.8; rho32=.5;
Sigma = matrix(c(1,0,rho31,0,1,rho32,rho31,rho32,1),ncol=3)
delta1 = c(4,-1,2); delta2=c(-2,3,-1); betas1 = .5; betas2 = -1; beta2 = 1; beta0=2
simiv = simIV(delta1,delta2,beta0,betas1,betas2,beta2,Sigma,n,z)
nW<- 18
W<- matrix(rnorm(nW*dim(z)[1]),dim(z)[1],nW)
YXW<-cbind(simiv$y,simiv$X,W)
write.csv(YXW,file='513SimNormalBMAivYXWNew.csv', row.names=FALSE)
Z<-z
write.csv(Z,file="513SimNormalBMAivZNew.csv", row.names=FALSE)
install.packages(c("TSA", "forecast"))
#Simular un ARMA(1,1) y calcular la ACF, PACF y EACF
library(TSA)
library(forecast)
ts.sim <- arima.sim(list(order = c(1,0,1), ar = 0.7, ma = 0.3), n = 200)
ts.sim <- arima.sim(list(order = c(1,0,0), ar = 0.7), n = 200)
ts.plot(ts.sim)
par(mfrow=c(2,1))
acf(ts.sim)
pacf(ts.sim)
eacf(ts.sim)
auto.arima(ts.sim,d=0, approximation=FALSE, stepwise=FALSE)
#Estimar modelo ARIMA
ts.fit <- arima(ts.sim, order = c(1,0,1))
ts.fit
